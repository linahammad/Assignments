/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tspbyga;

import java.awt.Color;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Linah 08/01/2013
 *
 */
public class MyFrame extends javax.swing.JFrame {

    /**
     * Creates new form MyFrame
     */
    public MyFrame() {
        initComponents();
    }

    Random rn = new Random();
    int randomnum;
    int array1[] = new int[6];
    int array2[] = new int[6];
    int array3[] = new int[6];
    int array4[] = new int[6];
    int array[] = new int[6];

    int fval1 = 0;
    int fval2 = 0;
    int fval3 = 0;
    int fval4 = 0;
    int m1;
    int m2;
    int g = 1;
    int min1 = 0;
    int min2 = 0;
    int fitval1[] = new int[100];
    int fitval2[] = new int[100];

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textField1 = new javax.swing.JTextField();
        textField2 = new javax.swing.JTextField();
        textField3 = new javax.swing.JTextField();
        textField4 = new javax.swing.JTextField();
        chromosome1 = new javax.swing.JTextField();
        chromosome2 = new javax.swing.JTextField();
        chromosome3 = new javax.swing.JTextField();
        chromosome4 = new javax.swing.JTextField();
        fitnessValue2 = new javax.swing.JTextField();
        fitnessValue1 = new javax.swing.JTextField();
        fitnessValue3 = new javax.swing.JTextField();
        fitnessValue4 = new javax.swing.JTextField();
        note = new javax.swing.JTextField();
        evaluateButton = new javax.swing.JButton();
        crossoverButton = new javax.swing.JButton();
        mutationButton = new javax.swing.JButton();
        nextGenerationButton = new javax.swing.JButton();
        initialpopulationButton = new javax.swing.JButton();
        selectionButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));

        textField1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textField1.setPreferredSize(new java.awt.Dimension(100, 30));

        textField2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textField2.setName(""); // NOI18N
        textField2.setPreferredSize(new java.awt.Dimension(100, 30));

        textField3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textField3.setPreferredSize(new java.awt.Dimension(100, 30));

        textField4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textField4.setPreferredSize(new java.awt.Dimension(100, 30));

        chromosome1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chromosome1.setPreferredSize(new java.awt.Dimension(140, 30));

        chromosome2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chromosome2.setPreferredSize(new java.awt.Dimension(140, 30));

        chromosome3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chromosome3.setPreferredSize(new java.awt.Dimension(140, 30));

        chromosome4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chromosome4.setPreferredSize(new java.awt.Dimension(140, 30));

        fitnessValue2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fitnessValue2.setPreferredSize(new java.awt.Dimension(80, 30));

        fitnessValue1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fitnessValue1.setPreferredSize(new java.awt.Dimension(80, 30));

        fitnessValue3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fitnessValue3.setPreferredSize(new java.awt.Dimension(80, 30));

        fitnessValue4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fitnessValue4.setPreferredSize(new java.awt.Dimension(80, 30));

        note.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(note)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField1, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(textField2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textField3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textField4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chromosome4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fitnessValue4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chromosome1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chromosome2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(fitnessValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(fitnessValue2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(chromosome3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fitnessValue3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(note, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chromosome1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fitnessValue1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chromosome2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fitnessValue2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chromosome4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fitnessValue4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chromosome3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fitnessValue3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(85, Short.MAX_VALUE))))
        );

        evaluateButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        evaluateButton.setText("Evaluate");
        evaluateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        evaluateButton.setPreferredSize(new java.awt.Dimension(200, 30));
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        crossoverButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        crossoverButton.setText("Crossover");
        crossoverButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        crossoverButton.setPreferredSize(new java.awt.Dimension(200, 30));
        crossoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crossoverButtonActionPerformed(evt);
            }
        });

        mutationButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        mutationButton.setText("Mutation");
        mutationButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        mutationButton.setPreferredSize(new java.awt.Dimension(200, 30));
        mutationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutationButtonActionPerformed(evt);
            }
        });

        nextGenerationButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nextGenerationButton.setText("Next Generation");
        nextGenerationButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        nextGenerationButton.setPreferredSize(new java.awt.Dimension(250, 50));
        nextGenerationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextGenerationButtonActionPerformed(evt);
            }
        });

        initialpopulationButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        initialpopulationButton.setText("Initial population");
        initialpopulationButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        initialpopulationButton.setPreferredSize(new java.awt.Dimension(200, 30));
        initialpopulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialpopulationButtonActionPerformed(evt);
            }
        });

        selectionButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        selectionButton.setText("Selection");
        selectionButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        selectionButton.setPreferredSize(new java.awt.Dimension(200, 30));
        selectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Generations Result");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jButton1.setPreferredSize(new java.awt.Dimension(200, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(nextGenerationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(crossoverButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mutationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(initialpopulationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(evaluateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(initialpopulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(evaluateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crossoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mutationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextGenerationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialpopulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialpopulationButtonActionPerformed
        this.setTitle(g + " Generation");

        this.textField1.setText("Chromosome 1 :");
        this.textField2.setText("Chromosome 2 :");
        this.textField3.setText("Chromosome 3 :");
        this.textField4.setText("Chromosome 4 :");
        this.note.setText("press evaluate button");
        for (int j = 0; j < 4; j++) {
            for (int x = 0; x < 6; x++) {
                randomnum = rn.nextInt(6) + 1;
                if (x == 0) {
                    array[x] = randomnum;
                } else if (x > 0) {
                    int c = 0;
                    for (; c < x;) {
                        if (array[c] != randomnum) {
                            c++;
                        } else {
                            c = x + 1;
                        }

                    }
                    if (c == x) {
                        array[x] = randomnum;
                    } else {
                        x--;
                    }

                }

            }

            for (int x = 0; x < 6; x++) {
                if (j == 0) {
                    array1[x] = array[x];
                }
                if (j == 1) {
                    array2[x] = array[x];
                }
                if (j == 2) {
                    array3[x] = array[x];
                }
                if (j == 3) {
                    array4[x] = array[x];
                }
            }

        }

        this.chromosome1.setText(array1[0] + " " + array1[1] + " " + array1[2] + " " + array1[3] + " " + array1[4] + " " + array1[5]);
        this.chromosome2.setText(array2[0] + " " + array2[1] + " " + array2[2] + " " + array2[3] + " " + array2[4] + " " + array2[5]);
        this.chromosome3.setText(array3[0] + " " + array3[1] + " " + array3[2] + " " + array3[3] + " " + array3[4] + " " + array3[5]);
        this.chromosome4.setText(array4[0] + " " + array4[1] + " " + array4[2] + " " + array4[3] + " " + array4[4] + " " + array4[5]);
        JOptionPane.showMessageDialog(null, "Encoding : Permutation Encoding", "TSP problem", JOptionPane.INFORMATION_MESSAGE);

        JOptionPane.showMessageDialog(null, "We represent every city with an integer\nAmman => 1\nIrbid => 2\nAl-Mafraq => 3\nAl-Salt => 4\nAqabah => 5\nAl-Karak => 6", "TSP problem", JOptionPane.INFORMATION_MESSAGE);
        this.initialpopulationButton.setForeground(Color.DARK_GRAY);
        this.evaluateButton.setForeground(Color.blue);
        this.selectionButton.setForeground(Color.DARK_GRAY);
        this.crossoverButton.setForeground(Color.DARK_GRAY);
        this.mutationButton.setForeground(Color.DARK_GRAY);
        this.nextGenerationButton.setForeground(Color.DARK_GRAY);


    }//GEN-LAST:event_initialpopulationButtonActionPerformed

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        this.note.setText("Press selectin button ");
        int[][] matrix = new int[6][6];
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                matrix[i][j] = rn.nextInt(501);
            }
        }

        fval1 = 0;
        fval2 = 0;
        fval3 = 0;
        fval4 = 0;
        for (int i = 0; i <= 4; i++) {
            fval1 += matrix[array1[i] - 1][array1[i + 1] - 1];
        }
        fval1 += matrix[array1[5] - 1][array1[0] - 1];
        for (int i = 0; i <= 4; i++) {
            fval2 += matrix[array2[i] - 1][array2[i + 1] - 1];
        }
        fval2 += matrix[array2[5] - 1][array2[0] - 1];
        for (int i = 0; i <= 4; i++) {
            fval3 += matrix[array3[i] - 1][array3[i + 1] - 1];
        }
        fval3 += matrix[array3[5] - 1][array3[0] - 1];
        for (int i = 0; i <= 4; i++) {
            fval4 += matrix[array4[i] - 1][array4[i + 1] - 1];
        }
        fval4 += matrix[array4[5] - 1][array4[0] - 1];
        this.fitnessValue1.setText(fval1 + "");
        this.fitnessValue2.setText(fval2 + "");
        this.fitnessValue3.setText(fval3 + "");
        this.fitnessValue4.setText(fval4 + "");
        if (g == 1) {
            //   JOptionPane.showMessageDialog(null,"The fitness function will be the total cost of the tour represented by each chromosome .", "TSP propblem", JOptionPane.INFORMATION_MESSAGE);JOptionPane.showMessageDialog(null,"The fitness function will be the total cost of the tour represented by each chromosome .", "TSP propblem", JOptionPane.INFORMATION_MESSAGE);
            JOptionPane.showMessageDialog(null, "The fitness value can be calculated as the sum of the distances traversed in each travel segment .", "TSP propblem", JOptionPane.INFORMATION_MESSAGE);
        }
        this.evaluateButton.setForeground(Color.DARK_GRAY);
        this.selectionButton.setForeground(Color.blue);
        this.crossoverButton.setForeground(Color.DARK_GRAY);
        this.mutationButton.setForeground(Color.DARK_GRAY);
        this.nextGenerationButton.setForeground(Color.DARK_GRAY);
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void selectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionButtonActionPerformed
        this.note.setText("press crossover button");

        int check[] = {fval1, fval2, fval3, fval4};
        min1 = check[0];
        m1 = 0;

        for (int i = 0; i < 4; i++) {
            if (check[i] < min1) {
                min1 = check[i];
                m1 = i;
            }
        }
        if (m1 == 0) {
            min2 = check[1];
            m2 = 1;
        } else {
            min2 = check[0];
            m2 = 0;
        }
        for (int i = 0; i < 4; i++) {
            if (i != m1) {
                if (check[i] < min2) {
                    min2 = check[i];
                    m2 = i;
                }
            }
        }
        fitval1[g] = min1;
        fitval2[g] = min2;

        if (m1 == 0 || m2 == 0) {
            this.textField1.setBackground(Color.yellow);
            this.chromosome1.setBackground(Color.yellow);
            this.fitnessValue1.setBackground(Color.yellow);
        }
        if (m1 == 1 || m2 == 1) {
            this.textField2.setBackground(Color.yellow);
            this.chromosome2.setBackground(Color.yellow);
            this.fitnessValue2.setBackground(Color.yellow);
        }
        if (m1 == 2 || m2 == 2) {
            this.textField3.setBackground(Color.yellow);
            this.chromosome3.setBackground(Color.yellow);
            this.fitnessValue3.setBackground(Color.yellow);
        }
        if (m1 == 3 || m2 == 3) {
            this.textField4.setBackground(Color.yellow);
            this.chromosome4.setBackground(Color.yellow);
            this.fitnessValue4.setBackground(Color.yellow);
        }
        if (g == 1) {
            JOptionPane.showMessageDialog(null, " Selected the two minimum solutions(minimum distance between cities)", "TSP problem", JOptionPane.INFORMATION_MESSAGE);
        }
        this.evaluateButton.setForeground(Color.DARK_GRAY);
        this.selectionButton.setForeground(Color.DARK_GRAY);
        this.crossoverButton.setForeground(Color.blue);
        this.mutationButton.setForeground(Color.DARK_GRAY);
        this.nextGenerationButton.setForeground(Color.DARK_GRAY);
    }//GEN-LAST:event_selectionButtonActionPerformed

    private void crossoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crossoverButtonActionPerformed
        // TODO add your handling code here
        Object[] values = {"By default", "Randomly", "My points"};
        Object selectedvalue;
        selectedvalue = JOptionPane.showInputDialog(null, "What are the points ?", "TSP problem :Two-point crossover", JOptionPane.QUESTION_MESSAGE, null, values, values[0]);
        this.note.setText("Check for mutation .");

        this.textField2.setText("Parent 2");
        this.textField3.setText("Offspring 1");
        this.textField4.setText("Offspring 2");
        this.textField1.setBackground(Color.WHITE);
        this.textField2.setBackground(Color.WHITE);
        this.textField3.setBackground(Color.WHITE);
        this.textField4.setBackground(Color.WHITE);
        this.chromosome1.setBackground(Color.WHITE);
        this.chromosome2.setBackground(Color.WHITE);
        this.chromosome3.setBackground(Color.WHITE);
        this.chromosome4.setBackground(Color.WHITE);
        this.fitnessValue1.setBackground(Color.WHITE);
        this.fitnessValue2.setBackground(Color.WHITE);
        this.fitnessValue3.setBackground(Color.WHITE);
        this.fitnessValue4.setBackground(Color.WHITE);
        int[] memory = new int[6];
        int m = 0;
        if (m2 == 0) {
            for (int i = 0; i < 6; i++) {
                memory[i] = array1[i];
                m = 1;
            }
        }
        if (m2 == 1) {
            for (int i = 0; i < 6; i++) {
                memory[i] = array2[i];
            }
            m = 2;
        }
        if (m2 == 2) {
            for (int i = 0; i < 6; i++) {
                memory[i] = array3[i];
            }
            m = 3;
        }
        if (m2 == 3) {
            for (int i = 0; i < 6; i++) {
                memory[i] = array4[i];
            }
            m = 4;
        }
        if (m1 == 0) {
            for (int i = 0; i < 6; i++) {
                array1[i] = array1[i];
            }
            this.textField1.setText("Parent 1(ch 1)");;
        }
        if (m1 == 1) {
            for (int i = 0; i < 6; i++) {
                array1[i] = array2[i];
            }
            this.textField1.setText("Parent 1(ch 2)");
        }
        if (m1 == 2) {
            for (int i = 0; i < 6; i++) {
                array1[i] = array3[i];
            }
            this.textField1.setText("Parent 1(ch 3)");
        }
        if (m1 == 3) {
            for (int i = 0; i < 6; i++) {
                array1[i] = array4[i];
            }
            this.textField1.setText("Parent 1(ch 4)");
        }
        {
            for (int i = 0; i < 6; i++) {
                array2[i] = memory[i];
            }
            this.textField2.setText("Parent 2(ch " + m + ")");
        }

        for (int i = 0; i < 6; i++) {
            array3[i] = 0;
            array4[i] = 0;
        }

        if (selectedvalue == "By default") {
            boolean exist;
            //cross over by default
            for (int i = 2; i <= 4; i++) {
                array3[i] = array2[i];
                array4[i] = array1[i];
            }
            int index = 5;
            int x = 5;
            while (array3[x] == 0) {
                exist = check(array3, array1[index]);
                if (exist == true) {
                    array3[x] = array1[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
            //crossover o2 by default
            index = 5;
            x = 5;
            while (array4[x] == 0) {

                exist = check(array4, array2[index]);
                if (exist == true) {
                    array4[x] = array2[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
        }
        if (selectedvalue == "Randomly") {
            //crossover two points randomly
            int point1 = rn.nextInt(6);
            while (point1 == 5) {
                point1 = rn.nextInt(6);
            }
            int point2 = rn.nextInt(6);
            if (point1 == 0) {
                while (point2 <= point1 || point2 == 5) {
                    point2 = rn.nextInt(6);
                }
            } else {
                while (point2 <= point1) {
                    point2 = rn.nextInt(6);
                }
            }
            System.out.print((point1 + 1) + "\t" + (point2 + 1));
            for (int i = point1; i <= point2; i++) {
                array3[i] = array2[i];
                array4[i] = array1[i];
            }
            int index;
            int x;
            if (point2 != 5) {
                index = point2 + 1;
                x = point2 + 1;
            } else {
                index = 0;
                x = 0;
            }
            boolean exist;
            while (array3[x] == 0) {
                exist = check(array3, array1[index]);
                if (exist == true) {
                    array3[x] = array1[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
            if (point2 != 5) {
                index = point2 + 1;
                x = point2 + 1;
            } else {
                index = 0;
                x = 0;
            }
            while (array4[x] == 0) {

                exist = check(array4, array2[index]);
                if (exist == true) {
                    array4[x] = array2[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
        }
        if (selectedvalue == "My points") {
            int p1 = Integer.parseInt(JOptionPane.showInputDialog("Enter the first point 1-6"));
            int p2 = Integer.parseInt(JOptionPane.showInputDialog("Enter the second point 1-6"));
            p1--;
            p2--;
            int point1;
            int point2;
            if (p1 < p2) {
                point1 = p1;
                point2 = p2;
            } else {
                point1 = p2;
                point2 = p1;
            }
            for (int i = point1; i <= point2; i++) {
                array3[i] = array2[i];
                array4[i] = array1[i];
            }
            int index;
            int x;
            if (point2 != 5) {
                index = point2 + 1;
                x = point2 + 1;
            } else {
                index = 0;
                x = 0;
            }
            boolean exist;
            while (array3[x] == 0) {
                exist = check(array3, array1[index]);
                if (exist == true) {
                    array3[x] = array1[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
            if (point2 != 5) {
                index = point2 + 1;
                x = point2 + 1;
            } else {
                index = 0;
                x = 0;
            }
            while (array4[x] == 0) {

                exist = check(array4, array2[index]);
                if (exist == true) {
                    array4[x] = array2[index];
                    if (x == 5) {
                        x = 0;
                    } else {
                        x++;
                    }
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                } else {
                    if (index == 5) {
                        index = 0;
                    } else {
                        index++;
                    }
                }
            }
        }
        this.chromosome1.setText(array1[0] + " " + array1[1] + " " + array1[2] + " " + array1[3] + " " + array1[4] + " " + array1[5]);
        this.chromosome2.setText(array2[0] + " " + array2[1] + " " + array2[2] + " " + array2[3] + " " + array2[4] + " " + array2[5]);
        this.chromosome3.setText(array3[0] + " " + array3[1] + " " + array3[2] + " " + array3[3] + " " + array3[4] + " " + array3[5]);
        this.chromosome4.setText(array4[0] + " " + array4[1] + " " + array4[2] + " " + array4[3] + " " + array4[4] + " " + array4[5]);
        this.fitnessValue1.setText(null);
        this.fitnessValue2.setText(null);
        this.fitnessValue3.setText(null);
        this.fitnessValue4.setText(null);
        if (g == 1) {

            JOptionPane.showMessageDialog(null, " Chose a part between two point from the first parent\n Copy this part to the first child \nCopy the numbers that are not in te first part ,to the\n first child\n   -starting right from cut point of the copied part \n   -using the of the second parent\n   -and wrapping around at the end\nAnalogous for the second child ,with parent roles reversed. ", "TSP problem", JOptionPane.INFORMATION_MESSAGE);
        }
        this.evaluateButton.setForeground(Color.DARK_GRAY);
        this.selectionButton.setForeground(Color.DARK_GRAY);
        this.crossoverButton.setForeground(Color.DARK_GRAY);
        this.mutationButton.setForeground(Color.blue);
        this.nextGenerationButton.setForeground(Color.blue);
    }//GEN-LAST:event_crossoverButtonActionPerformed

    private void mutationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutationButtonActionPerformed
        Object[] values = {"parent 1", "parent 2", "offspring 1", "offspring 2"};
        Object selectedvalue;
        selectedvalue = JOptionPane.showInputDialog(null, "Choose ", "Mutation", JOptionPane.QUESTION_MESSAGE, null, values, values[0]);
        if (selectedvalue == "parent 1") {
            int random1 = rn.nextInt(6);
            int random2 = rn.nextInt(6);
            while (random2 == random1) {
                random2 = rn.nextInt(6);
            }
            int memory = array1[random1];
            array1[random1] = array1[random2];
            array1[random2] = memory;

            this.chromosome1.setText(array1[0] + " " + array1[1] + "|" + array1[2] + " " + array1[3] + " " + array1[4] + "|" + array1[5]);
        }
        if (selectedvalue == "parent 2") {
            int random1 = rn.nextInt(6);
            int random2 = rn.nextInt(6);
            while (random2 == random1) {
                random2 = rn.nextInt(6);
            }
            int memory = array2[random1];
            array2[random1] = array2[random2];
            array2[random2] = memory;

            this.chromosome2.setText(array2[0] + " " + array2[1] + "|" + array2[2] + " " + array2[3] + " " + array2[4] + "|" + array2[5]);
        }
        if (selectedvalue == "offspring 1") {
            int random1 = rn.nextInt(6);
            int random2 = rn.nextInt(6);
            while (random2 == random1) {
                random2 = rn.nextInt(6);
            }
            int memory = array3[random1];
            array3[random1] = array3[random2];
            array3[random2] = memory;

            this.chromosome3.setText(array3[0] + " " + array3[1] + "|" + array3[2] + " " + array3[3] + " " + array3[4] + "|" + array3[5]);
        }
        if (selectedvalue == "offspring 2") {
            int random1 = rn.nextInt(6);
            int random2 = rn.nextInt(6);
            while (random2 == random1) {
                random2 = rn.nextInt(6);
            }
            int memory = array4[random1];
            array4[random1] = array4[random2];
            array4[random2] = memory;

            this.chromosome4.setText(array4[0] + " " + array4[1] + "|" + array4[2] + " " + array4[3] + " " + array4[4] + "|" + array4[5]);
        }
        if (g == 1) {
            JOptionPane.showMessageDialog(null, "The mutation operator includes achange in a solution.\n we mutate the string by randomly selecting any two cities and intrchanging their positions in the solution.", "TSP propblem", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_mutationButtonActionPerformed

    private void nextGenerationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextGenerationButtonActionPerformed
        g++;
        this.note.setText("press evaluate button");
        this.setTitle(g + "  Generation");
        this.textField1.setText("Chromosome 1");
        this.textField2.setText("Chromosome 2");
        this.textField3.setText("Chromosome 3");
        this.textField4.setText("Chromosome 4");
        this.chromosome1.setText(array1[0] + " " + array1[1] + " " + array1[2] + " " + array1[3] + " " + array1[4] + " " + array1[5]);
        this.chromosome2.setText(array2[0] + " " + array2[1] + " " + array2[2] + " " + array2[3] + " " + array2[4] + " " + array2[5]);
        this.chromosome3.setText(array3[0] + " " + array3[1] + " " + array3[2] + " " + array3[3] + " " + array3[4] + " " + array3[5]);
        this.chromosome4.setText(array4[0] + " " + array4[1] + " " + array4[2] + " " + array4[3] + " " + array4[4] + " " + array4[5]);
        this.evaluateButton.setForeground(Color.blue);
        this.selectionButton.setForeground(Color.DARK_GRAY);
        this.crossoverButton.setForeground(Color.DARK_GRAY);
        this.mutationButton.setForeground(Color.DARK_GRAY);
        this.nextGenerationButton.setForeground(Color.DARK_GRAY);
    }//GEN-LAST:event_nextGenerationButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String result = "";
        for (int c = 1; c <= g; c++) {
            result = result + "\n" + "Generation " + (c) + " : " + fitval1[c] + "     " + fitval2[c];
        }
        JOptionPane.showMessageDialog(null, result, "TSP problem", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyFrame().setVisible(true);
            }
        });
    }

    public static boolean check(int[] array, int x) {
        boolean tf = false;
        for (int i = 0; i < array.length; i++) {
            if (array[i] == x) {
                tf = false;
                break;
            } else {
                tf = true;
            }
        }
        return tf;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField chromosome1;
    private javax.swing.JTextField chromosome2;
    private javax.swing.JTextField chromosome3;
    private javax.swing.JTextField chromosome4;
    private javax.swing.JButton crossoverButton;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JTextField fitnessValue1;
    private javax.swing.JTextField fitnessValue2;
    private javax.swing.JTextField fitnessValue3;
    private javax.swing.JTextField fitnessValue4;
    private javax.swing.JButton initialpopulationButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton mutationButton;
    private javax.swing.JButton nextGenerationButton;
    private javax.swing.JTextField note;
    private javax.swing.JButton selectionButton;
    private javax.swing.JTextField textField1;
    private javax.swing.JTextField textField2;
    private javax.swing.JTextField textField3;
    private javax.swing.JTextField textField4;
    // End of variables declaration//GEN-END:variables
}
